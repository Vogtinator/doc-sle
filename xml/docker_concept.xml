<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="cha.docker.conceptoverview" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Conceptual Overview</title>
 <para>
  &deng; is a lightweight virtualization solution to run multiple virtual units
  (containers) simultaneously on a single control host. Containers are isolated
  with Kernel Control Groups (<xref linkend="vle.docker.cgroup"/>) and
  <xref linkend="vle.docker.namespace"/>.
 </para>
 <para>
  Full virtualization solutions such as &xen;, &kvm;, or &libvirt; are based on
  the processor simulating a complete hardware environment and controlling the
  virtual machines. However, &deng; only provides operating system-level
  virtualization where the Linux kernel controls isolated containers.
 </para>
 <para>
  Before going into detail about &deng;, let us define some of the terms used:
 </para>
 <variablelist>
  <varlistentry xml:id="Docker_engine">
   <term>
    &deng;
   </term>
   <listitem>
    <para>
     &deng; is a server-client type application that performs all
     tasks related to virtual machines. &deng; comprises the
     following:
    </para>
    <itemizedlist>
     <listitem>
      <formalpara>
       <title>Daemon:</title>
       <para>
        The server side of &deng; manages all &docker; objects (images,
        containers, network connections used by containers, etc.).
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>REST API:</title>
       <para>
        Applications can use this API to communicate directly with the daemon.
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>CLI Client:</title>
       <para>
        Enables you to communicate with the daemon. If the daemon is running
        on a different machine than the CLI client, the CLI client can
        communicate by using network sockets or the REST API provided by
        &deng;.
       </para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Docker_Image">
   <term>Image</term>
   <listitem>
    <para>
     An <emphasis>image</emphasis> is a read-only template used to create a
     <emphasis>virtual machine</emphasis> on the host server. A &docker; image is
     made by a series of layers built one over the other. Each layer
     corresponds to a permanent change, for example an update of an
     application. The changes are stored in a file called a
     <emphasis>Dockerfile</emphasis>. For more details see
     <link xlink:href="http://docs.docker.com/engine/reference/glossary#image">the
      official Docker documentation</link>.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Dockerfile
   </term>
   <listitem>
    <para>
     A <emphasis>Dockerfile</emphasis> stores changes made on top of the base
     image. The <xref linkend="Docker_engine"/> reads instructions in the
     <emphasis>Dockerfile</emphasis> and builds a new image according to the
     instructions.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Container
   </term>
   <listitem>
    <para>
     A <emphasis>container</emphasis> is a running instance based on a
     particular &docker; <xref linkend="Docker_Image"/>. Each
     <emphasis>container</emphasis> can be distinguished by a unique container
     ID.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Registry
   </term>
   <listitem>
    <para>
     A <emphasis>registry</emphasis> is storage for already created images. It
     typically contains several <emphasis>repositories</emphasis> There are two
     types of registry:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       public registry - where everyone (usually registered) can download and
       use images. A typical public registry is
       <link xlink:href="https://hub.docker.com/">Docker Hub</link>.
      </para>
     </listitem>
     <listitem>
      <para>
       private registry - these are accessible for particular users or from a
       particular private network.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Repository
   </term>
   <listitem>
    <para>
     A <emphasis>repository</emphasis> is storage in a
     <emphasis>registry</emphasis> that stores a different version of a
     particular image. You can pull or push images from or to a repository.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle.docker.cgroup">
   <term>
    Control groups
   </term>
   <listitem>
    <para>
     <emphasis>Control groups</emphasis>, also called
     <literal>cgroups</literal>, is a Linux kernel feature that allows
     aggregating or partitioning tasks (processes) and all their children into
     hierarchically organized groups to isolate resources.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle.docker.namespace">
   <term>
    Namespaces
   </term>
   <listitem>
    <para>
     &deng; uses <emphasis>namespaces</emphasis> for its containers that
     isolates resources reserved for particular containers.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Orchestration</term>
   <listitem>
    <para>
     In a production environment you typically need a cluster with many
     containers on each cluster node. The containers must cooperate and you
     need a framework that enables you to manage the containers automatically.
     The act of automatic container management is called container
     orchestration and is typically handled by Kubernetes.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  &deng; is a platform that allows developers and system administrators to
  manage the complete lifecycle of images. &deng; makes it easy to build, ship
  and run images containing applications.
 </para>
 <para>
  &deng; provides you with the following advantages:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Isolation of applications and operating systems through containers.
   </para>
  </listitem>
  <listitem>
   <para>
    Near native performance, as &deng; manages allocation of resources in real
    time.
   </para>
  </listitem>
  <listitem>
   <para>
    Controls network interfaces and resources available inside containers
    through cgroups.
   </para>
  </listitem>
  <listitem>
   <para>
    Versioning of images.
   </para>
  </listitem>
  <listitem>
   <para>
    Allows building new images based on existing ones.
   </para>
  </listitem>
  <listitem>
   <para>
    Provides you with container orchestration.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  On the other hand, &deng; has the following limitations:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <title>Limitations of &deng;</title>
  <listitem>
   <para>
    Containers run inside the host system's kernel and cannot use a different
    kernel.
   </para>
  </listitem>
  <listitem>
   <para>
    Only allows Linux <emphasis>guest</emphasis> operating systems.
   </para>
  </listitem>
  <listitem>
   <para>
    &deng; is not a full virtualization stack like &xen;, &kvm;, or &libvirt;.
   </para>
  </listitem>
  <listitem>
   <para>
    Security depends on the host system. Refer to the
    <link xlink:href="http://docs.docker.com/articles/security/">official
     security documentation</link> for more details.
   </para>
  </listitem>
 </itemizedlist>
 <!--<sect1 xml:id="Docker_Architecture">
  <title>&deng; Architecture</title>

 </sect1>-->
 <para>
  &deng; uses a client/server architecture. You can use the <emphasis>CLI
   client</emphasis> to communicate with the <emphasis>daemon</emphasis>. The
  <emphasis>daemon</emphasis> then performs operations with containers and
  manages images locally or in registry. The <emphasis>CLI client</emphasis>
  can run on the same server as the host daemon or on a different machine. The
  <emphasis>CLI client</emphasis> communicates with the
  <emphasis>daemon</emphasis> by using network sockets. The architecture is
  depicted in <xref linkend="Docker_architecture"/>.
 </para>

 <figure xml:id="Docker_architecture">
  <title>The &deng; Architecture</title>
  <mediaobject>
   <imageobject>
    <imagedata fileref="docker_architecture.png" format="PNG" width="70%"/>
   </imageobject>
  </mediaobject>
 </figure>
</chapter>
